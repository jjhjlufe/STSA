%  Sine Tree-Seed Algorithm (STSA)
%  
%  Source code v1.0
%
%  Main Paper:
%   Jianhua Jiang, Meirong Xu, Xianqiu Meng, Keqin Li,
%   STSA: A sine Tree-Seed Algorithm for complex continuous optimization problems,
%   Physica A: Statistical Mechanics and its Applications,
%   Volume 537,
%   2020,
%   122802,
%   https://doi.org/10.1016/j.physa.2019.122802.
%______________________________________________________________________________________________


function [Destination_fitness,Destination_position,Convergence_curve,time]=STSA(N,Max_iteration,lb,ub,dim,fobj)
tic
display('STSA is optimizing your problem');

%Initialize the maxFEs and ST value
maxFEs=dim*10000;
ST = 0.6; % control parameter
nSeedsLow = ceil(N*0.1); % Low bound of the number of Seeds generated by a tree 
nSeedsHigh = ceil(N*0.25); % upper bound of the number of Seeds generated by a tree

%Initialize the set of random solutions for Trees
Trees=initialization(N,dim,ub,lb);  % X=initialization(N,dim,ub,lb);
Obj_Trees = zeros(1,N); % Initilize N trees with its objective functions
Destination_tree_position=zeros(N,dim); % Restore positions for N trees
Destination_tree_fitness= zeros(1,N); % Restore fitnesses for N trees
Objective_values = zeros(1,size(Trees,1)); % Save the best objective value for each tree.

% Calculate the fitness of the first set and find the best one
for i=1:size(Trees,1)
    Objective_values(1,i)=fobj(Trees(i,:));
    Obj_Trees(1,i)=Objective_values(1,i); % save the objective value for each tree
    Destination_tree_position(i,:)=Trees(i,:); %save the tree as the best objective
    Destination_tree_fitness(i)=Objective_values(1,i);  %Save the current tree as the best tree
    All_objective_values(1,i)=Objective_values(1,i);% save the first value as the best tree
end

%Main loop
FEs = N; % FEs save the number of Function Evaluations
[minTree]=min(Obj_Trees); % save the minimal value of current N trees
mins=zeros(1,Max_iteration);
iter = 0; %initial loop

while(Max_iteration>=iter)
        iter=iter+1; % 
                   
       ratioFEs = FEs/maxFEs; % ratioFES between 0 and 1, see Eq. (11) in our paper
       xTheta = 0.5*ratioFEs * pi; %xTheta between 0 and 0.5*PI, see Eq. (12) in our paper
       for i=1:N
           ns(i)=fix(nSeedsLow+abs((nSeedsHigh-nSeedsLow)*cos(xTheta)))+1; %, see Eq. (13) in our paper
       end
       
       k=2*(1-ratioFEs); % see Eq. (14) in our paper
       
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       
       for i=1:N
            
            seeds=zeros(ns(i),dim);
            obj_seeds=zeros(1,ns(i));
            
            [minimum,min_indis]=min(Obj_Trees);
            bestParams=Trees(min_indis,:);        

                 
            for j=1:ns(i)                 
       
                seeds(j,:)=Trees(j,:);   
                
                komsu=fix(rand*N)+1;
                while(i==komsu)
                    komsu=fix(rand*N)+1;
                end
                                
                for d=1:dim
                     selectRand = rand;  
                            if selectRand < 0.5*ST
                               tmpRand = rand;
                                seeds(j,d) =tmpRand*Trees(komsu,d)+(1-tmpRand)*bestParams(d); %, see Eq. (15) in our paper
                             if (seeds(j,d)>ub)
                                     seeds(j,d)=ub;
                             end
                             if (seeds(j,d)<lb)
                                    seeds(j,d)=lb;
                             end
                             
                           elseif 0.5*ST<=selectRand<ST

                                seeds(j,d)=Trees(i,d)+k*(bestParams(d)-rand*Trees(i,d))*sin(pi*acos(rand));% see Eq. (16) in our paper    
                                if(seeds(j,d)>ub)
                                     seeds(j,d)=ub;
                                end
                                if(seeds(j,d)<lb)
                                    seeds(j,d)=lb;
                                end
                           else 
                               seeds(j,d)=rand*Trees(i,d)+k*(Trees(komsu,d)-rand*Trees(i,d))*sin(pi*acos(rand));% see Eq. (17) in our paper   
                               if (seeds(j,d)>ub)
                                    seeds(j,d)=ub;
                               end
                               if (seeds(j,d)<lb)
                                    seeds(j,d)=lb;
                               end
                             end

                end %end dim
                 obj_seeds(j)=fobj(seeds(j,:));%
            end %end ns(i)
           
            FEs = FEs + ns(i);
            
            [mintohum,mintohum_indis]=min(obj_seeds);
            if(mintohum<Obj_Trees(i))
                Trees(i,:)=seeds(mintohum_indis,:);
                Obj_Trees(i)=mintohum;
                
            end
       end   
        
        [min_tree,min_tree_index]=min(Obj_Trees);
        if(min_tree<minimum)
            minimum=min_tree;
            bestParams=Trees(min_tree_index,:);
        end
        mins(iter)=minimum;
        fprintf('Iter=%d .... min=%g .... FES=%d .... \n',iter,minimum,FEs);
end
     Convergence_curve=mins;
     Destination_fitness = Convergence_curve(iter);
     Destination_position =bestParams;
    toc
    time=toc;
end